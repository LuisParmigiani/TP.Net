@page "/PersonaCrud/{Page:int?}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using DTOs

<h1>PersonaCrud</h1>

@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

@code {
    [Parameter]
    public int? Page { get; set; }
    private int Id;
    private string Nombre;
    private string Apellido;
    private string Direccion;
    private string Email;
    private string Telefono;
    private DateTime FechaNacimiento = DateTime.Today;
    private int Legajo;
    private int TipoPersona;
    private int IdPlan;
    private string mensaje;

    private async Task Borrar()
    {
        if (Id <= 0)
        {
            mensaje = "Error: Debe especificar un ID de persona válido";
            return;
        }
        try
        {
            var client = ClientFactory.CreateClient("API");
            // Primero comprobar que la API responde con una llamada GET básica
            try
            {
                var health = await client.GetAsync("/Personas", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[PersonasCrud] Health check exception: " + hre);
                return;
            }
            var response = await client.DeleteAsync($"/Personas/{Id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Persona borrado correctamente!";
                Id = 0;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[PersonasCrud] DELETE /Personas/{Id} responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[PersonasCrud] Exception: {ex}");
        }
    }

    private async Task ActualizarPersona()
    {
        if(Id <= 0)
        {
            mensaje = "Error: Debe especificar un ID de persona válido";
            return;
        }
        if (string.IsNullOrWhiteSpace(Nombre))
        {
            mensaje = "Error: El nombre de Persona es obligatorio";
            return;
        }

        if (string.IsNullOrWhiteSpace(Apellido))
        {
            mensaje = "Error:El appelido es obligatorio";
            return;
        }

        if (string.IsNullOrWhiteSpace(Direccion))
        {
            mensaje = "Error: La direccion es obligatoria";
            return;
        }
        if (string.IsNullOrWhiteSpace(Email))
        {
            mensaje = "Error:el mail es obligatorio";
            return;
        }
        if (FechaNacimiento == default)
        {
            mensaje = "Error: La fecha de nacimiento es obligatoria";
            return;
        }
        if (Legajo <= 0)
        {
            mensaje = "Error: El legajo debe ser un número positivo";
            return;
        }
        if (TipoPersona < 1 || TipoPersona > 3)
        {
            mensaje = "Error: El tipo de persona debe ser 1 (Usuario), 2 (Alumno) o 3 (Docente)";
            return;
        }
        if (IdPlan <= 0)
        {
            mensaje = "Error: El Id Plan debe ser un número positivo";
            return;
        }
        var personaDTO = new PersonaDTO
        {
            Id = Id, 
            Nombre = Nombre,
            Apellido = Apellido,
            Direccion = Direccion,
            Email = Email,
            Telefono = Telefono,
            FechaNacimiento = FechaNacimiento,
            Legajo = Legajo,
            TipoPersona = TipoPersona,
            IdPlan = IdPlan
        };
        try
        {
            var client = ClientFactory.CreateClient("API");
            // Primero comprobar que la API responde con una llamada GET básica
            try
            {
                var health = await client.GetAsync("/Personas", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[PersonasCrud] Health check exception: " + hre);
                return;
            }

            var response = await client.PutAsJsonAsync($"/Personas/{Id}", personaDTO);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Persona actualizado correctamente!";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[PersonasCrud] PUT /Personas/{Id} responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[PersonasCrud] Exception: {ex}");
        }
    }

    private async Task BuscarPersona()
    {
        if (Id <= 0)
        {
            mensaje = "Error: Debe especificar un ID de persona válido";
            return;
        }
        try
        {
            // prepara la api para la llamada
            var client = ClientFactory.CreateClient("API");

            try
            {
                // Hace una llamada ligera para comprobar que la API responde (Solo lee las cabeceras)
                var health = await client.GetAsync("/Personas", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[PersonasCrud] Health check exception: " + hre);
                return;
            }
            // Llama a la API para obtener el Persona
            var response = await client.GetAsync($"/Personas/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var Persona = await response.Content.ReadFromJsonAsync<PersonaDTO>();
                if (Persona != null)
                {
                    Id = Persona.Id;

                    Nombre = Persona.Nombre;
                    Apellido = Persona.Apellido;
                        Direccion = Persona.Direccion;
                        Email = Persona.Email;
                        Telefono = Persona.Telefono;
                        FechaNacimiento = Persona.FechaNacimiento;
                        Legajo = Persona.Legajo;
                        TipoPersona = Persona.TipoPersona;
                        IdPlan = Persona.IdPlan;
                    
                    mensaje = "Persona encontrado!";
                }
                else
                {
                    mensaje = "Persona no encontrado.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[PersonasCrud] GET /Personas/{Id} responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[PersonasCrud] Exception: {ex}");
        }
        StateHasChanged();

    }




    private async Task CrearPersona()
    {
        // Validaciones básicas
        if (string.IsNullOrWhiteSpace(Nombre))
        {
            mensaje = "Error: El nombre de Persona es obligatorio";
            return;
        }

        if (string.IsNullOrWhiteSpace(Apellido))
        {
            mensaje = "Error:El appelido es obligatorio";
            return;
        }

        if (string.IsNullOrWhiteSpace(Direccion))
        {
            mensaje = "Error: La direccion es obligatoria";
            return;
        }
        if (string.IsNullOrWhiteSpace(Email))
        {
            mensaje = "Error:el mail es obligatorio";
            return;
        }
        if(FechaNacimiento == default)
        {
            mensaje = "Error: La fecha de nacimiento es obligatoria";
            return;
        }
        if (Legajo <= 0)
        {
            mensaje = "Error: El legajo debe ser un número positivo";
            return;
        }
        if (TipoPersona < 1 || TipoPersona > 3)
        {
            mensaje = "Error: El tipo de persona debe ser 1 (Persona), 2 (Alumno) o 3 (Docente)";
            return;
        }
        if (IdPlan <= 0)
        {
            mensaje = "Error: El Id Plan debe ser un número positivo";
            return;
        }
        var personaDTO = new PersonaDTO
        {
            Id = 0, // El ID se asigna en el servidor
            Nombre = Nombre,
            Apellido = Apellido,
            Direccion = Direccion,
            Email = Email,
            Telefono = Telefono,
            FechaNacimiento = FechaNacimiento,
            Legajo = Legajo,
            TipoPersona = TipoPersona,
            IdPlan = IdPlan
        };

        try
        {
            var client = ClientFactory.CreateClient("API");

            // Primero comprobar que la API responde con una llamada GET básica
            try
            {
                // Reemplaza la llamada pesada por una que solo lea las cabeceras (no descarga el body completo)
                var health = await client.GetAsync("/personas", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[PersonasCrud] Health check exception: " + hre);
                return;
            }

            var response = await client.PostAsJsonAsync("/personas", personaDTO);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Persona creada correctamente!";
                // Limpiar campos
                Nombre = Apellido = Direccion = Email = Telefono = string.Empty;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[PersonaCrud] POST /Persona responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[PersonaCrud] Exception: {ex}");
        }

        StateHasChanged();
    }

   
    
    private void Navigate(int nuevaId)
    {
        var url = nuevaId == 0 ? "/PersonaCrud" : $"/PersonaCrud/{nuevaId}";
        Navigation.NavigateTo(url);
    }
}

@if (Page == null)
{
    <div class="text-center my-4">
        <h2 class="mb-4">Menú CRUD</h2>
        <div class="d-flex flex-column gap-3 w-50 mx-auto">
            <button class="btn btn-primary btn-lg" @onclick="() => Navigate(2)">Crear</button>
            <button class="btn btn-info btn-lg text-white" @onclick="() => Navigate(3)">Buscar</button>
            <button class="btn btn-warning btn-lg text-white" @onclick="() => Navigate(4)">Actualizar</button>
            <button class="btn btn-danger btn-lg" @onclick="() => Navigate(5)">Borrar</button>
        </div>
    </div>

}

@if (Page == 2)
{
    <div class="card shadow p-4" style="max-width: 500px; margin: auto; margin-top: 50px;">
        <h2 class="mb-4 text-center">Crear Persona</h2>

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success")">
                @mensaje
            </div>
        }

        <div class="mb-3">
            <label for="Nombre" class="form-label">Nombre</label>
            <input @bind="Nombre" id="Nombre" placeholder="Nombre" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="Apellido" class="form-label">Apellido</label>
            <input @bind="Apellido" id="Apellido" placeholder="Apellido" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="Direccion" class="form-label">Direccion</label>
            <input @bind="Direccion" id="Direccion" placeholder="Direccion" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="Email" class="form-label">Email</label>
            <input @bind="Email" id="Email" placeholder="Email" type="email" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="Telefono" class="form-label">Telefono</label>
            <input @bind="Telefono" id="Telefono" placeholder="Telefono" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="FechaNacimiento" class="form-label">Fecha de Nacimiento</label>
            <input @bind="FechaNacimiento" id="FechaNacimiento" type="date" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="Legajo" class="form-label">Legajo</label>
            <input @bind="Legajo" id="Legajo" placeholder="Legajo" type="number" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="TipoPersona" class="form-label">Tipo de Persona</label>
            <select @bind="TipoPersona" id="TipoPersona" class="form-select">
                <option value="1">Usuario</option>
                <option value="2">Alumno</option>
                <option value="3">Docente</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="IdPlan" class="form-label">Id Plan</label>
            <input @bind="IdPlan" id="IdPlan" placeholder="Id Plan" type="number" class="form-control" />
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-primary w-50" @onclick="CrearPersona">Crear</button>
            <button type="button" class="btn btn-secondary w-50" @onclick="() => Navigate(0)">Volver</button>
        </div>
    </div>

}

@if (Page == 3)
{

    <h2>Buscar</h2>
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success")">
            @mensaje
        </div>
    }
    <div class="mb-3">
        <label for="Id" class="form-label">Id Persona</label>
        <input @bind="Id" id="Id" placeholder="Id Persona" type="number" class="form-control" />
    </div>
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-primary w-50" @onclick="BuscarPersona">BuscarPersona</button>
        <button type="button" class="btn btn-secondary w-50" @onclick="() => Navigate(0)">Volver</button>
    </div>
    @if (@Nombre != null)
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Detalles de la Persona</h5>
                <p class="card-text"><strong>Nombre de Persona:</strong> @Nombre</p>
                <p class="card-text"><strong>Apellido:</strong> @Apellido</p>
                <p class="card-text"><strong>Direccion:</strong> @Direccion</p>
                <p class="card-text"><strong>Email:</strong> @Email</p>
                <p class="card-text"><strong>Telefono:</strong> @Telefono</p>
                <p class="card-text"><strong>Fecha de Nacimiento:</strong> @FechaNacimiento.ToShortDateString()</p>
                <p class="card-text"><strong>Legajo:</strong> @Legajo</p>
                <p class="card-text"><strong>Tipo de Persona:</strong> @(TipoPersona == 1 ? "Persona" : TipoPersona == 2 ? "Alumno" : "Docente")</p>
                <p class="card-text"><strong>Id Plan:</strong> @IdPlan</p>
            </div>
        </div>
    }
}

@if (Page == 4)
{
    <h2 class="mb-4 text-center">Actualizar Persona</h2>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success") text-center">
            @mensaje
        </div>
    }

    <div class="mb-3 d-flex gap-2 align-items-end">
        <div class="flex-grow-1">
            <label for="Id" class="form-label">Id Persona</label>
            <input @bind="Id" id="IdPersona" placeholder="Id Persona" type="number" class="form-control" />
        </div>
        <button type="button" class="btn btn-primary" @onclick="BuscarPersona">Buscar</button>
    </div>

    <div class="mb-3">
        <label for="Nombre" class="form-label">Nombre de Persona</label>
        <input @bind="Nombre" id="Nombre" placeholder="Nombre" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Apellido" class="form-label">Apellido</label>
        <input @bind="Apellido" id="Apellido" placeholder="Apellido" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Direccion" class="form-label">Direccion</label>
        <input @bind="Direccion" id="Direccion" placeholder="Direccion" class="form-control" />
        </div>
    <div class="mb-3">
        <label for="Email" class="form-label">Email</label>
        <input @bind="Email" id="Email" placeholder="Email" type="email" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Telefono" class="form-label">Telefono</label>
        <input @bind="Telefono" id="Telefono" placeholder="Telefono" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="FechaNacimiento" class="form-label">Fecha de Nacimiento</label>
        <input @bind="FechaNacimiento" id="FechaNacimiento" type="date" class="form-control" />
        </div>
    <div class="mb-3">
        <label for="Legajo" class="form-label">Legajo</label>
        <input @bind="Legajo" id="Legajo" placeholder="Legajo" type="number" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="TipoPersona" class="form-label">Tipo de Persona</label>
        <select @bind="TipoPersona" id="TipoPersona" class="form-select">
            <option value="1">Usuario</option>
            <option value="2">Alumno</option>
            <option value="3">Docente</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="IdPlan" class="form-label">Id Plan</label>
        <input @bind="IdPlan" id="IdPlan" placeholder="Id Plan" type="number" class="form-control" />
    </div>
    <div class="d-flex gap-3">
        <button type="button" class="btn btn-success flex-fill" @onclick="ActualizarPersona">Actualizar</button>
        <button type="button" class="btn btn-secondary flex-fill" @onclick="() => Navigate(0)">Volver</button>
    </div>
}


@if (Page == 5)
{
    <h2>Borrar</h2>
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success")">
            @mensaje
        </div>

    }

    <div class="mb-3">
        <label for="Id" class="form-label">Id Persona</label>
        <input @bind="Id" id="Id" placeholder="Id Persona" type="number" class="form-control" />
    </div>
    <div class="d-flex gap-3">
        <button type="button" class="btn btn-success flex-fill" @onclick="Borrar">Borrar</button>
        <button type="button" class="btn btn-secondary flex-fill" @onclick="() => Navigate(0)">Volver</button>
    </div>
}
