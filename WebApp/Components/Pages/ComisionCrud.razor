@page "/ComisionCrud/{Page:int?}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using DTOs

<h1>ComisionCrud</h1>

@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

@code {
    [Parameter]
    public int? Page { get; set; }
    private int Id;
    private int AnioEspecialidad;
    private string Descripcion;
    private int IDPlan;
    private string mensaje = string.Empty;

    private async Task Borrar()
    {
        if (Id <= 0)
        {
            mensaje = "Error: Debe especificar un ID de Comision válido";
            return;
        }
        try
        {
            var client = ClientFactory.CreateClient("API");
            //  comprobar que la API responde con una llamada GET básica
            try
            {
                var health = await client.GetAsync("/Comisines", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[ComisionesCrud] Health check exception: " + hre);
                return;
            }
            var response = await client.DeleteAsync($"/comisiones/{Id}");
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Comision borrada correctamente!";
                Id = 0;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[ComisionesCrud] DELETE /comisiones/{Id} responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[ComisionesCrud] Exception: {ex}");
        }
    }

    private async Task ActualizarComision()
    {
        if (Id <= 0)
        {
            mensaje = "Error: Debe especificar un ID de Comision válido";
            return;
        }
        var ComisionDTO = new ComisionDTO
        {
            Id = Id,
            AnioEspecialidad = AnioEspecialidad,
            Descripcion = Descripcion,
            IDPlan = IDPlan

        };
        try
        {
            var client = ClientFactory.CreateClient("API");
            
            try
            {
                var health = await client.GetAsync("/comisiones", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[ComisionesCrud] Health check exception: " + hre);
                return;
            }

            var response = await client.PutAsJsonAsync($"/comisiones/{Id}", ComisionDTO);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Comision actualizada correctamente!";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[ComisionesCrud] PUT /comisiones/{Id} responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[ComisionesCrud] Exception: {ex}");
        }
    }

    private async Task BuscarComision()
    {
        if (Id <= 0)
        {
            mensaje = "Error: Debe especificar un ID de Comision válido";
            return;
        }
        try
        {
            // prepara la api para la llamada
            var client = ClientFactory.CreateClient("API");

            try
            {
                
                var health = await client.GetAsync("/comisiones", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[ComisionesCrud] Health check exception: " + hre);
                return;
            }
            // Llama a la API para obtener el Comision
            var response = await client.GetAsync($"/comisiones/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var Comision = await response.Content.ReadFromJsonAsync<ComisionDTO>();
                if (Comision != null)
                {
                    Id = Comision.Id;
                    AnioEspecialidad = Comision.AnioEspecialidad;
                    Descripcion = Comision.Descripcion;
                    IDPlan = Comision.IDPlan;

                    mensaje = "Comision encontrado!";
                }
                else
                {
                    mensaje = "Comision no encontrado.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[ComisionesCrud] GET /comisiones/{Id} responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[ComisionesCrud] Exception: {ex}");
        }
        StateHasChanged();

    }




    private async Task CrearComision()
    {
        var ComisionDTO = new ComisionDTO
        {
            Id = 0, 
            Descripcion = Descripcion,  
            AnioEspecialidad = AnioEspecialidad,
            IDPlan = IDPlan

        };

        try
        {
            var client = ClientFactory.CreateClient("API");

           
            try
            {
                // Reemplaza la llamada pesada por una que solo lea las cabeceras (no descarga el body completo)
                var health = await client.GetAsync("/comisiones", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegurese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[ComisionsCrud] Health check exception: " + hre);
                return;
            }

            var response = await client.PostAsJsonAsync("/comisiones", ComisionDTO);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Comision creada correctamente!";
                // Limpiar campos
                Descripcion = string.Empty;
                AnioEspecialidad = IDPlan = 0;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensaje = $"Error {(int)response.StatusCode} {response.ReasonPhrase}: {error}";
                Console.WriteLine($"[ComisionCrud] POST /Comision responded {response.StatusCode}: {error}");
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[ComisionCrud] Exception: {ex}");
        }

        StateHasChanged();
    }



    private void Navigate(int nuevaId)
    {
        var url = nuevaId == 0 ? "/ComisionCrud" : $"/ComisionCrud/{nuevaId}";
        Navigation.NavigateTo(url);
    }
}

@if (Page == null)
{
    <div class="text-center my-4">
        <h2 class="mb-4">Menú CRUD</h2>
        <div class="d-flex flex-column gap-3 w-50 mx-auto">
            <button class="btn btn-primary btn-lg" @onclick="() => Navigate(2)">Crear</button>
            <button class="btn btn-info btn-lg text-white" @onclick="() => Navigate(3)">Buscar</button>
            <button class="btn btn-warning btn-lg text-white" @onclick="() => Navigate(4)">Actualizar</button>
            <button class="btn btn-danger btn-lg" @onclick="() => Navigate(5)">Borrar</button>
        </div>
    </div>

}

@if (Page == 2)
{
    <div class="card shadow p-4" style="max-width: 500px; margin: auto; margin-top: 50px;">
        <h2 class="mb-4 text-center">Crear comision</h2>

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success")">
                @mensaje
            </div>
        }

        <div class="mb-3">
            <label for="AnioEspecialidad" class="form-label">AnioEspecialidad</label>
            <input @bind="AnioEspecialidad" id="AnioEspecialidad" placeholder="AnioEspecialidad" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="IdPlan" class="form-label">Id Plan</label>
            <input @bind="IDPlan" id="IdPlan" placeholder="Id Plan" type="number" class="form-control" />
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-primary w-50" @onclick="CrearComision">Crear</button>
            <button type="button" class="btn btn-secondary w-50" @onclick="() => Navigate(0)">Volver</button>
        </div>
    </div>

}

@if (Page == 3)
{

    <h2>Buscar Comision</h2>
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success")">
            @mensaje
        </div>
    }
    <div class="mb-3">
        <label for="Id" class="form-label">Id Comision</label>
        <input @bind="Id" id="Id" placeholder="Id Comision" type="number" class="form-control" />
    </div>
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-primary w-50" @onclick="BuscarComision">BuscarComision</button>
        <button type="button" class="btn btn-secondary w-50" @onclick="() => Navigate(0)">Volver</button>
    </div>
    @if (Descripcion != null)
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Detalles de la Comision</h5>
                <p class="card-text"><strong>Descripcion:</strong> @Descripcion</p>
                <p class="card-text"><strong>Id Plan:</strong> @IDPlan</p>
                <p class="card-text"><strong>Ano especialidad:</strong> @AnioEspecialidad</p>
            </div>
        </div>
    }
}

@if (Page == 4)
{
    <h2 class="mb-4 text-center">Actualizar comision</h2>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success") text-center">
            @mensaje
        </div>
    }

    <div class="mb-3 d-flex gap-2 align-items-end">
        <div class="flex-grow-1">
            <label for="Id" class="form-label">Id comision</label>
            <input @bind="Id" id="Idcomision" placeholder="Id comision" type="number" class="form-control" />
        </div>
        <button type="button" class="btn btn-primary" @onclick="BuscarComision">Buscar</button>
    </div>

    <div class="mb-3">
        <label for="Descripcion" class="form-label">Descripcion</label>
        <input @bind="Descripcion" id="Descripcion" placeholder="Descripcion" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="AnioEspecialidad" class="form-label">Ano Especialidad</label>
        <input @bind="AnioEspecialidad" id="AnioEspecialidad" placeholder="AnioEspecialidad" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="IDPlan" class="form-label">ID Plan</label>
        <input @bind="IDPlan" id="IDPlan" placeholder="Id Plan" type="number" class="form-control" />
    </div>
    <div class="d-flex gap-3">
        <button type="button" class="btn btn-success flex-fill" @onclick="ActualizarComision">Actualizar</button>
        <button type="button" class="btn btn-secondary flex-fill" @onclick="() => Navigate(0)">Volver</button>
    </div>
}


@if (Page == 5)
{
    <h2>Borrar</h2>
    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert @(mensaje.StartsWith("Error") ? "alert-danger" : "alert-success")">
            @mensaje
        </div>

    }

    <div class="mb-3">
        <label for="Id" class="form-label">Id Comision</label>
        <input @bind="Id" id="Id" placeholder="Id Comision" type="number" class="form-control" />
    </div>
    <div class="d-flex gap-3">
        <button type="button" class="btn btn-success flex-fill" @onclick="Borrar">Borrar</button>
        <button type="button" class="btn btn-secondary flex-fill" @onclick="() => Navigate(0)">Volver</button>
    </div>
}
