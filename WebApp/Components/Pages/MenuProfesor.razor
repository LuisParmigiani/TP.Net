@page "/MenuProfesor/{UserId}/{Page}"

@rendermode InteractiveServer
@using Domain.Model
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using DTOs


@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

<h3>MenuProfesor</h3>

@code {

    [Parameter]
    public string Page { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private string? mensaje;
    private int nota;
    private int curso;

    private List<CursoDTO> CursosList = new List<CursoDTO>();
    private List<PersonaDTO> AlumnosList = new List<PersonaDTO>();

    private void Sec(int sec)
    {
        var url =  $"/MenuProfesor/{UserId}/{sec.ToString()}";
        Navigation.NavigateTo(url);
    }
    public async void SubirNota(int IdAlumno)
    {
        if (nota != -1 && nota != 0 && !(nota >= 6 && nota <= 10))
        {
            mensaje = "Nota no valida";
            nota = 0;
            return;
        } 
        else
        {
            try
            {
                InscripcionDTO inscripcionDTO;
                if (nota == 0)
                {
                    inscripcionDTO = new InscripcionDTO
                        {
                            Id = 4,
                            IdAlumno = IdAlumno,
                            IdCurso = 0,
                            Nota = 0,
                            Condicion = "regular"
                        };
                       
                        
                }
                else if (nota == -1)
                {
                    inscripcionDTO = new InscripcionDTO
                        {
                            Id = 4,
                            IdAlumno = IdAlumno,
                            Nota = 0,
                            IdCurso = 0,
                            Condicion = "libre"
                        };
                }
                else
                {
                    inscripcionDTO = new InscripcionDTO
                        {
                            Id = 4,
                            IdAlumno = IdAlumno,
                            IdCurso = 0,
                            Nota = nota,
                            Condicion = "aprobado"
                        };
                }
                Console.WriteLine("--------------------------------------------------------------------------------------------------------");
                Console.WriteLine(IdAlumno);

                var client = ClientFactory.CreateClient("API");
                var response = await client.PutAsJsonAsync($"/inscripciones/{6}", inscripcionDTO);
                if (response.IsSuccessStatusCode)
                {
                    mensaje = "Nota subida con exito";
                }
                else
                {
                    mensaje = "Error al subir la nota";
                }
        }
            catch (Exception ex)
            {
                mensaje = $"Error al subir la nota: {ex.Message}";
            }
            return;
        }

        nota = 0;
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Page == "0")
        {
            await CargarCursos();
        }
        else if (Page == "1")
        {

            await CargarAlumnos(curso);
        }
        else if (Page == "2")
        {


        }

        await base.OnParametersSetAsync();
    }

    async Task CargarCursos()
    {
        try
        {
            var client = ClientFactory.CreateClient("API");
            var response = await client.GetAsync($"cursos");
            if (response.IsSuccessStatusCode)
            {
                var cursos = await response.Content.ReadFromJsonAsync<List<CursoDTO>>();
                if (cursos != null)
                {
                    CursosList = cursos;
                }
            }
            else
            {
                mensaje = "Error al cargar los cursos.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al cargar los cursos: {ex.Message}";
        }
    }

    async Task CargarAlumnos(int curso)
    {
        try
        {
            var client = ClientFactory.CreateClient("API");
            var response = await client.GetAsync($"personas");
            if (response.IsSuccessStatusCode)
            {
                var alumnos = await response.Content.ReadFromJsonAsync<List<PersonaDTO>>();
                if (alumnos != null)
                {
                    AlumnosList = alumnos;
                }
            }
            else
            {
                mensaje = "Error al cargar los alumnos.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al cargar los alumnos: {ex.Message}";
        }
    }
    
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success">@mensaje</div>
}

@if (Page == "0")
{
    <div>
         <table>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Curso</th>
                    <th>AnioCalendario</th>
                    <th>Comision</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cur in CursosList)
                {
                    <tr>
                        <td> @cur.Id </td>
                        <td> @cur.Descripcion</td>
                        <td> @cur.AnioCalendario</td>
                        <td> @cur.IdComision</td>
                        <td>
                            <button @onclick="() => {curso = cur.Id ; Sec(1);}">Ver Alumnos</button>
                        </td>
                    </tr>
                 }
            </tbody>
        </table>
    </div>
}

else if (Page == "1")
{
    <div>
        <h3>Listado de alumnos </h3>
        <table>
            <thead>
                <tr>
                    <th>Leg</th>
                    <th>Nombre y Apellido</th>
                    <th>Nota (-1 Es libre y 0 es regular miestras que de 6 a 10 es la nota  )</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var al in AlumnosList)               
                   {
                    <tr>
                        <td> @al.Legajo</td>
                        <td> @al.Nombre @al.Apellido</td>
                        <td>
                            <input @bind="nota" name="name" placeholder="Nota del alumno" />
                            <button @onclick="() => SubirNota(al.Id)">Guardar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button @onclick="() => Sec(0)">Volver</button>
    </div>
}
else
{
    <div>
        <button @onclick="() => Sec(0)">Volver</button>
    </div>
}
