@page "/MenuProfesor/{UserId}"

@rendermode InteractiveServer
@using Domain.Model
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using DTOs
@using Microsoft.AspNetCore.Mvc.Diagnostics


@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3 style="font-family:Segoe UI, Roboto, Arial; color:#1f2937; margin-bottom:12px;">Menu Profesor</h3>

@code {

    [Parameter]
    public string Page { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private string? mensaje;
    private int curso;
    private int IdInscripcion;

    private Dictionary<int, int?> NotasPorAlumno = new();

    private List<CursoDTO> CursosList = new List<CursoDTO>();
    private List<AlumnoInscripcion> AlumnosList = new List<AlumnoInscripcion>();

    private string nuevaContrasena = string.Empty;
    private string confirmarContrasena = string.Empty;
    private bool isChangingPassword = false;

  
    public async Task SubirNota(int IdAlumno, int IdInscripcion)
    {
        NotasPorAlumno.TryGetValue(IdAlumno, out int? notaAlumno);
        var notaValor = notaAlumno ?? 0;

        if (notaValor != -1 && notaValor != 0 && !(notaValor >= 6 && notaValor <= 10))
        {
            mensaje = "Nota no valida";
            NotasPorAlumno[IdAlumno] = 0;
            return;
        }
        else
        {
            try
            {
                InscripcionDTO inscripcionDTO;
                if (notaValor == 0)
                {
                    inscripcionDTO = new InscripcionDTO
                    {
                        Id = IdInscripcion,
                        IdAlumno = IdAlumno,
                        IdCurso = curso,
                        Nota = 0,
                        Condicion = "regular"
                    };
                }
                else if (notaValor == -1)
                {
                    inscripcionDTO = new InscripcionDTO
                    {
                        Id = IdInscripcion,
                        IdAlumno = IdAlumno,
                        Nota = 0,
                        IdCurso = curso,
                        Condicion = "libre"
                    };
                }
                else
                {
                    inscripcionDTO = new InscripcionDTO
                    {
                        Id = IdInscripcion,
                        IdAlumno = IdAlumno,
                        IdCurso = curso,
                        Nota = notaValor,
                        Condicion = "aprobado"
                    };
                }


                var client = ClientFactory.CreateClient("API");
                var response = await client.PutAsJsonAsync($"/inscripciones/{IdInscripcion}", inscripcionDTO);
                if (response.IsSuccessStatusCode)
                {
                    mensaje = "Nota subida con exito";
                    // opcional: limpiar el campo del alumno concreto después del éxito
                    NotasPorAlumno.Remove(IdAlumno);
                }
                else
                {
                    mensaje = "Error al subir la nota";

                }
            }
            catch (Exception ex)
            {
                mensaje = $"Error al subir la nota: {ex.Message}";
            }
            return;
        }
    }


    async Task CargarCursos()
    {
        try
        {
            var client = ClientFactory.CreateClient("API");
            var response = await client.GetAsync($"/cursos/Byprofesor/{UserId}");
            if (response.IsSuccessStatusCode)
            {
                var cursos = await response.Content.ReadFromJsonAsync<List<CursoDTO>>();
                if (cursos != null)
                {
                    CursosList = cursos;
                }
            }
            else
            {
                mensaje = "Error al cargar los cursos.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al cargar los cursos: {ex.Message}";
        }
    }

    async Task PedirReporte(int idCurso)
    {
        try
        {
            var client = ClientFactory.CreateClient("API");
            var response = await client.GetAsync($"/alumnos/Reporte/{idCurso}");
            if (response.IsSuccessStatusCode)
            {
                var url = $"{client.BaseAddress}alumnos/Reporte/{idCurso}";
                await JS.InvokeVoidAsync("window.open", url, "_blank");
            }
        }
        catch (Exception ex)
        {
            mensaje = ex.Message;
        }
    }

    async Task CargarAlumnos(int curso)
    {
        try
        {
            var client = ClientFactory.CreateClient("API");
            var response = await client.GetAsync($"/alumnos/{curso}");
            if (response.IsSuccessStatusCode)
            {
                var alumnos = await response.Content.ReadFromJsonAsync<List<AlumnoInscripcion>>();
                if (alumnos != null)
                {
                    AlumnosList = alumnos;
                }
            }
            else
            {
                mensaje = "Error al cargar los alumnos.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Excepción al cargar los alumnos: {ex.Message}";
        }
    }

    private async Task CambiarContrasenaAsync()
    {
        // Validaciones
        if (string.IsNullOrWhiteSpace(nuevaContrasena))
        {
            mensaje = "Por favor ingrese la nueva contraseña.";
            return;
        }

        if (string.IsNullOrWhiteSpace(confirmarContrasena))
        {
            mensaje = "Por favor confirme la nueva contraseña.";
            return;
        }

        if (nuevaContrasena != confirmarContrasena)
        {
            mensaje = "Las contraseñas no coinciden.";
            return;
        }

        if (nuevaContrasena.Length < 6)
        {
            mensaje = "La contraseña debe tener al menos 6 caracteres.";
            return;
        }

        try
        {
            isChangingPassword = true;
            var client = ClientFactory.CreateClient("API");
            var response = await client.PutAsync($"/usuarios/cambioPass?idPersona={UserId}&nuevaClave={Uri.EscapeDataString(nuevaContrasena)}", null);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Contraseña cambiada exitosamente.";
                Page = "0"; // Volver al menú principal
                nuevaContrasena = string.Empty;
                confirmarContrasena = string.Empty;
            }
            else
            {
                var errorText = await response.Content.ReadAsStringAsync();
                mensaje = $"Error al cambiar contraseña: {errorText}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cambiar contraseña: {ex.Message}";
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private void OnNotaInput(int id, ChangeEventArgs e)
    {
        var s = e?.Value?.ToString();
        if (int.TryParse(s, out var v))
        {
            if (v < -1) v = -1;
            if (v > 10) v = 10;
            NotasPorAlumno[id] = v;
        }
        else
        {
            NotasPorAlumno.Remove(id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarCursos();
    }
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div style="max-width:980px; margin:8px 0; padding:12px 16px; border-radius:8px; background:#ecfdf5; color:#065f46; font-family:Segoe UI, Roboto, Arial; box-shadow:0 1px 3px rgba(15,23,42,0.06);">
        @mensaje
    </div>
}

<div style="max-width:980px; margin:0 auto; padding:18px; font-family:Segoe UI, Roboto, Arial;">
@if (Page == "0" || Page == null )
{
    <div style="background:#ffffff; border-radius:10px; padding:16px; box-shadow:0 6px 18px rgba(15,23,42,0.06);">
         <table style="width:100%; border-collapse:collapse; min-width:360px; table-layout:fixed;">
            <thead>
                <tr>
                    <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6;">Id</th>
                    <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6;">Curso</th>
                    <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6;">Año</th>
                    <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6;">Comisión</th>
                    <th style="text-align:center; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cur in CursosList)
                {
                    <tr style="border-bottom:1px solid #f3f4f6;">
                        <td style="padding:12px; color:#111827; width:60px;"> @cur.Id </td>
                        <td style="padding:12px; color:#111827; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;"> @cur.Descripcion</td>
                        <td style="padding:12px; color:#111827; width:90px;"> @cur.AnioCalendario</td>
                        <td style="padding:12px; color:#111827; width:110px;"> @cur.IdComision</td>
                        <td style="padding:12px; text-align:center; width:150px;">
                            <button style="background:#2563eb; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; font-weight:600;"
                                    @onclick='async () => {await CargarAlumnos(cur.Id) ; curso = cur.Id ; Page = "1";}'>Ver Alumnos</button>
                        </td>
                        <td style="padding:12px; text-align:center; width:150px;">
                            <button style="background:#2563eb; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; font-weight:600;"
                                    @onclick='async () => {await PedirReporte(cur.Id);}'>Reporte del curso</button>
                        </td>
                    </tr>
                 }
            </tbody>
        </table>
        
        <!-- Botón de Cambiar Contraseña -->
        <div style="margin-top:20px; text-align:center;">
            <button style="background:#ff9800; color:#fff; border:none; padding:12px 24px; border-radius:8px; cursor:pointer; font-weight:600; font-size:14px;"
                    @onclick='() => Page = "2"'>Cambiar Contraseña</button>
        </div>
    </div>
}
else if (Page == "1")
{
    <div style="background:#ffffff; border-radius:10px; padding:16px; box-shadow:0 6px 18px rgba(15,23,42,0.06);">
        <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:12px;">
        <h4 style="margin:0; color:#111827;">Listado de alumnos</h4>
        <button style="background:#ef4444; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; font-weight:600;"
                @onclick='  () =>Page = "0"'>Volver</button>
    </div>
    <table style="width:100%; border-collapse:collapse; min-width:360px; table-layout:fixed;">
        <thead>
            <tr>
                <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6; width:90px;">Leg</th>
                <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6;">Nombre y Apellido</th>
                <th style="text-align:left; padding:10px; color:#374151; font-weight:600; border-bottom:1px solid #e6e6e6; width:260px;">Nota (-1 libre, 0 regular, 6-10 aprobado)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var al in AlumnosList)               
               {
                <tr style="border-bottom:1px solid #f3f4f6;">
                        <td style="padding:12px; color:#111827; vertical-align:middle;"> @al.LegajoAlumno</td>
                        <td style="padding:12px; color:#111827; vertical-align:middle;"> @al.NombreAlumno @al.ApellidoAlumno</td>
                    <td style="padding:12px; color:#111827; vertical-align:middle;">
                        <div style="display:flex; gap:8px; align-items:center;">
                            <input type="number" min="-1" max="10" step="1"
                                       value="@al.Nota"
                                       @oninput="e => OnNotaInput(al.IdALumno, e)"
                                   style="width:120px; padding:8px; border-radius:8px; border:1px solid #e5e7eb; outline:none; font-size:14px; color:#111827;"
                                   placeholder="Nota" />
                                @if (al.Nota != 0 )
                                {
                                    <button style="background:#10b981; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; font-weight:600;"
                                        @onclick="async () => await SubirNota(al.IdALumno, al.IdInscripcion)">
                                    Cambiar 
                                </button>
                                }
                                else
                                {

                                    <button style="background:#92b981; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; font-weight:600;"
                                                   @onclick="async () => await SubirNota(al.IdALumno, al.IdInscripcion)">
                                        Guardar
                                    </button>
                                }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
}
else if (Page == "2")
{
    <div style="background:#ffffff; border-radius:10px; padding:32px; box-shadow:0 6px 18px rgba(15,23,42,0.06); max-width:500px; margin:0 auto;">
        <h4 style="margin:0 0 24px 0; color:#111827; text-align:center; font-size:18px;">Cambiar Contraseña</h4>
        
        <div style="margin-bottom:16px;">
            <label style="display:block; margin-bottom:6px; color:#374151; font-weight:500;">Nueva Contraseña:</label>
            <input type="password" @bind="nuevaContrasena" 
                   style="width:100%; padding:12px; border-radius:8px; border:1px solid #e5e7eb; outline:none; font-size:14px;" 
                   placeholder="Ingrese nueva contraseña" />
        </div>
        
        <div style="margin-bottom:24px;">
            <label style="display:block; margin-bottom:6px; color:#374151; font-weight:500;">Confirmar Contraseña:</label>
            <input type="password" @bind="confirmarContrasena" 
                   style="width:100%; padding:12px; border-radius:8px; border:1px solid #e5e7eb; outline:none; font-size:14px;" 
                   placeholder="Confirme nueva contraseña" />
        </div>
        
        <div style="display:flex; gap:12px; justify-content:center;">
            <button style="background:#10b981; color:#fff; border:none; padding:12px 24px; border-radius:8px; cursor:pointer; font-weight:600;"
                    @onclick="CambiarContrasenaAsync" disabled="@isChangingPassword">
                @if (isChangingPassword)
                {
                    <span>Guardando...</span>
                }
                else
                {
                    <span>Guardar</span>
                }
            </button>
            <button style="background:#6b7280; color:#fff; border:none; padding:12px 24px; border-radius:8px; cursor:pointer; font-weight:600;"
                    @onclick='() => Page = "0"' disabled="@isChangingPassword">Cancelar</button>
        </div>
    </div>
}
else
{
    <div style="background:#ffffff; border-radius:10px; padding:16px; box-shadow:0 6px 18px rgba(15,23,42,0.06); display:flex; justify-content:flex-start;">
        <button style="background:#2563eb; color:#fff; border:none; padding:8px 12px; border-radius:8px; cursor:pointer; font-weight:600;"
                @onclick='() => Page = "0" '>Volver</button>
    </div>
}
</div>
