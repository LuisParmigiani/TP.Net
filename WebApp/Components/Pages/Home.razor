@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using DTOs


@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<h1>Web de alumnado</h1>
<div class="text-center">
    <img src="images/Students.png" alt="Students" />
    <div>
        <h3>Bienvenido a la web de alumnado</h3>
        <div>
            <label for="user">Usuario:</label>
            <input @bind="user" id="user" placeholder="Usuario" />
        </div>
        <div>
            <label for="password">Contraseña:</label>
            <input @bind="password" id="password" placeholder="Contraseña" type="password" />
        </div>
        <div>
            <button @onclick="Login" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Cargando...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </div>
        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert alert-info">@mensaje</div>
        }
    </div>
</div>

@code {
    private string user = string.Empty;
    private string password = string.Empty;
    private string mensaje = string.Empty;
    private bool isLoading = false;


    private async Task Login()
    {
        // Validación inicial
        if (string.IsNullOrWhiteSpace(user) || string.IsNullOrWhiteSpace(password))
        {
            mensaje = "Faltan ingresar campos obligatorios";
            StateHasChanged();
            return;
        }

        isLoading = true;
        mensaje = string.Empty;
        StateHasChanged();

        try
        {
            var client = ClientFactory.CreateClient("API");

            // Health check de la API
            try
            {
                using var health = await client.GetAsync("/usuarios", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegúrese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[PersonasCrud] Health check exception: " + hre);
                return;
            }

            // Codificar valores para la URL y hacer la petición
            var encodedUser = Uri.EscapeDataString(user);
            var encodedPassword = Uri.EscapeDataString(password);

            using var response = await client.GetAsync($"/usuarios/{encodedUser}/{encodedPassword}");

            if (!response.IsSuccessStatusCode)
            {
                mensaje = "Usuario o contraseña incorrecta.";
                return;
            }

            

            // Leer DTO de usuario de forma segura
            var Usuario = await response.Content.ReadFromJsonAsync<UsuarioDTO>();
            if (Usuario == null)
            {
                mensaje = "Error al procesar datos del usuario.";
                return;
            }

            var id = Usuario.IdPersona.ToString();

            // Obtener datos de la persona
            using var response2 = await client.GetAsync($"/personas/{Uri.EscapeDataString(id)}");

            if (!response2.IsSuccessStatusCode)
            {
                mensaje = "No se encontró la persona asociada al usuario.";
                return;
            }

            var Persona = await response2.Content.ReadFromJsonAsync<PersonaDTO>();
            if (Persona == null)
            {
                mensaje = "Error al obtener datos del usuario.";
                return;
            }

            if (Persona.TipoPersona == 2)
            {
                Navigation.NavigateTo($"/MenuAlumno/{Persona.Id.ToString()}/{0}");
            }
            else if (Persona.TipoPersona == 1)
            {
                Navigation.NavigateTo($"/MenuProfesor/{Persona.Id.ToString()}/{0}");
            }
            else
            {
                mensaje = "Tipo de usuario desconocido.";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[Login error] Exception: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
        StateHasChanged();
    }
}