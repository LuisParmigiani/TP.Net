@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using DTOs


@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<div style="max-width:720px;margin:32px auto;padding:20px;background:#ffffff;border-radius:12px;box-shadow:0 8px 30px rgba(13,38,59,0.08);font-family:system-ui,-apple-system,'Segoe UI',Roboto,'Helvetica Neue',Arial;color:#243041;">
    <h1 style="text-align:center;margin:0 0 12px;color:#1f2937;font-size:1.9rem;">Web de alumnado</h1>

    <div style="display:flex;flex-direction:column;align-items:center;gap:8px;">
        <img src="/utn1.gif" alt="Students" style="width:120px;height:auto;display:block;border-radius:8px;box-shadow:0 6px 18px rgba(16,24,40,0.06);" />

        <div style="width:100%;max-width:480px;margin-top:6px;">
            <h3 style="margin:10px 0 14px;text-align:center;color:#2b6cb0;font-weight:600;">Bienvenido a la web de alumnado</h3>

            <div style="display:flex;flex-direction:column;gap:10px;">
                <div>
                    <label for="user" style="display:block;font-size:0.95rem;font-weight:600;margin-bottom:6px;color:#334155;">Usuario:</label>
                    <input @bind="user" id="user" placeholder="Usuario" style="width:100%;padding:10px 12px;border:1px solid #e2e8f0;border-radius:8px;outline:none;box-sizing:border-box;font-size:0.95rem;" />
                </div>

                <div>
                    <label for="password" style="display:block;font-size:0.95rem;font-weight:600;margin-bottom:6px;color:#334155;">Contraseña:</label>
                    <input @bind="password" id="password" placeholder="Contraseña" type="password" style="width:100%;padding:10px 12px;border:1px solid #e2e8f0;border-radius:8px;outline:none;box-sizing:border-box;font-size:0.95rem;" />
                </div>

                <div>
                    <button @onclick="Login" disabled="@isLoading" style="width:100%;display:inline-flex;align-items:center;justify-content:center;padding:10px 14px;background:linear-gradient(90deg,#2563eb,#06b6d4);color:#fff;border:none;border-radius:10px;font-weight:600;cursor:pointer;box-shadow:0 6px 18px rgba(37,99,235,0.18);">
                        @if (isLoading)
                        {
                            <span>Cargando...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(mensaje))
                {
                    <div class="alert" style="margin-top:6px;padding:10px 12px;border-radius:8px;background:#eef6ff;border-left:4px solid #60a5fa;color:#083344;">
                        @mensaje
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string user = string.Empty;
    private string password = string.Empty;
    private string mensaje = string.Empty;
    private bool isLoading = false;


    private async Task Login()
    {
        // Validación inicial
        if (string.IsNullOrWhiteSpace(user) || string.IsNullOrWhiteSpace(password))
        {
            mensaje = "Faltan ingresar campos obligatorios";
            StateHasChanged();
            return;
        }

        isLoading = true;
        mensaje = string.Empty;
        StateHasChanged();

        try
        {
            var client = ClientFactory.CreateClient("API");

            // Health check de la API
            try
            {
                using var health = await client.GetAsync("/usuarios", HttpCompletionOption.ResponseHeadersRead);
                if (!health.IsSuccessStatusCode)
                {
                    var body = await health.Content.ReadAsStringAsync();
                    mensaje = $"API no disponible: {(int)health.StatusCode} {health.ReasonPhrase}. {body}";
                    return;
                }
            }
            catch (HttpRequestException hre)
            {
                mensaje = "Error de conexión al API: " + hre.Message + ". Asegúrese de iniciar el WebApi en http://localhost:5183";
                Console.WriteLine("[PersonasCrud] Health check exception: " + hre);
                return;
            }

            // Codificar valores para la URL y hacer la petición
            var encodedUser = Uri.EscapeDataString(user);
            var encodedPassword = Uri.EscapeDataString(password);

            using var response = await client.GetAsync($"/usuarios/{encodedUser}/{encodedPassword}");

            if (!response.IsSuccessStatusCode)
            {
                mensaje = "Usuario o contraseña incorrecta.";
                return;
            }

            

            // Leer DTO de usuario de forma segura
            var Usuario = await response.Content.ReadFromJsonAsync<UsuarioDTO>();
            if (Usuario == null)
            {
                mensaje = "Error al procesar datos del usuario.";
                return;
            }

            var id = Usuario.IdPersona.ToString();

            // Obtener datos de la persona
            using var response2 = await client.GetAsync($"/personas/{Uri.EscapeDataString(id)}");

            if (!response2.IsSuccessStatusCode)
            {
                mensaje = "No se encontró la persona asociada al usuario.";
                return;
            }

            var Persona = await response2.Content.ReadFromJsonAsync<PersonaDTO>();
            if (Persona == null)
            {
                mensaje = "Error al obtener datos del usuario.";
                return;
            }

            if (Persona.TipoPersona == 2)
            {
                Navigation.NavigateTo($"/MenuAlumno/{Persona.Id.ToString()}");
            }
            else if (Persona.TipoPersona == 1)
            {
                Navigation.NavigateTo($"/MenuProfesor/{Persona.Id.ToString()}");
            }
            else
            {
                mensaje = "Tipo de usuario desconocido.";
            }
        }
        catch (Exception ex)
        {
            mensaje = "Error: " + ex.Message;
            Console.WriteLine($"[Login error] Exception: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
        StateHasChanged();
    }
}